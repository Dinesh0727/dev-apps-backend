{
"errors": [
	{
		"id" : 1,
		"code_block_after_fix" : "import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class MyApplication { public static void main(String[] args) { SpringApplication.run(MyApplication.class, args); } }",
		"code_block_before_fix" : "public class MyApplication { public static void main(String[] args) { SpringApplication.run(MyApplication.class, args); } }",
		"heading" : "Spring Boot Application Fails to Start",
		"labels" : "spring boot,application,startup issue",
		"problem_description" : "The Spring Boot application fails to start due to a missing @SpringBootApplication annotation.",
		"project_name" : "SpringBootApp",
		"reference_links" : "https:\/\/spring.io\/guides\/gs\/spring-boot\/;https:\/\/docs.spring.io\/spring-boot\/docs\/current\/reference\/htmlsingle\/#getting-started",
		"solution_text" : "Added the @SpringBootApplication annotation to the main application class to ensure proper configuration scanning."
	},
	{
		"id" : 2,
		"code_block_after_fix" : "<p>Whenever I sent the httpHeaders map in the request I used to remove the content-length attribute from the headers:<\/p><pre><code><\/code>httpHeaders.remove(\"content-length\");<br><\/pre>",
		"code_block_before_fix" : "<p>Code used to extract headers:<\/p><div style=\"color: #cccccc;background-color: #1f1f1f;font-family: Consolas, 'Courier New', monospace;font-weight: normal;font-size: 12.5px;line-height: 17px;white-space: pre;\"><div><span style=\"color: #569cd6;\">private <\/span><span style=\"color: #4ec9b0;\">String <\/span><span style=\"color: #dcdcaa;\">getRequestHeadersAsString<\/span><span style=\"color: #cccccc;\">(<\/span><span style=\"color: #4ec9b0;\">HttpServletRequest<\/span><span style=\"color: #9cdcfe;\">httpRequest<\/span><span style=\"color: #cccccc;\">) {<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; <\/span><span style=\"color: #4ec9b0;\">Map<\/span><span style=\"color: #cccccc;\">&lt;<\/span><span style=\"color: #4ec9b0;\">String<\/span><span style=\"color: #cccccc;\">, <\/span><span style=\"color: #4ec9b0;\">String<\/span><span style=\"color: #cccccc;\">&gt; <\/span><span style=\"color: #9cdcfe;\">headerMap<\/span><span style=\"color: #d4d4d4;\">=<\/span><span style=\"color: #c586c0;\">new<\/span><span style=\"color: #4ec9b0;\">HashMap<\/span><span style=\"color: #cccccc;\">&lt;&gt;();<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; <\/span><span style=\"color: #4ec9b0;\">Enumeration<\/span><span style=\"color: #cccccc;\">&lt;<\/span><span style=\"color: #4ec9b0;\">String<\/span><span style=\"color: #cccccc;\">&gt; <\/span><span style=\"color: #9cdcfe;\">headerNames<\/span><span style=\"color: #d4d4d4;\">=<\/span><span style=\"color: #9cdcfe;\">httpRequest<\/span><span style=\"color: #cccccc;\">.<\/span><span style=\"color: #dcdcaa;\">getHeaderNames<\/span><span style=\"color: #cccccc;\">();<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; <\/span><span style=\"color: #c586c0;\">while<\/span><span style=\"color: #cccccc;\"> (<\/span><span style=\"color: #9cdcfe;\">headerNames<\/span><span style=\"color: #cccccc;\">.<\/span><span style=\"color: #dcdcaa;\">hasMoreElements<\/span><span style=\"color: #cccccc;\">()) {<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <\/span><span style=\"color: #4ec9b0;\">String<\/span><span style=\"color: #9cdcfe;\">headerName<\/span><span style=\"color: #d4d4d4;\">=<\/span><span style=\"color: #9cdcfe;\">headerNames<\/span><span style=\"color: #cccccc;\">.<\/span><span style=\"color: #dcdcaa;\">nextElement<\/span><span style=\"color: #cccccc;\">();<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <\/span><span style=\"color: #9cdcfe;\">headerMap<\/span><span style=\"color: #cccccc;\">.<\/span><span style=\"color: #dcdcaa;\">put<\/span><span style=\"color: #cccccc;\">(headerName, <\/span><span style=\"color: #9cdcfe;\">httpRequest<\/span><span style=\"color: #cccccc;\">.<\/span><span style=\"color: #dcdcaa;\">getHeader<\/span><span style=\"color: #cccccc;\">(headerName));<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; }<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; <\/span><span style=\"color: #4ec9b0;\">String<\/span><span style=\"color: #9cdcfe;\">headersJson<\/span><span style=\"color: #d4d4d4;\">=<\/span><span style=\"color: #ce9178;\">\"\"<\/span><span style=\"color: #cccccc;\">;<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; <\/span><span style=\"color: #c586c0;\">try<\/span><span style=\"color: #cccccc;\"> {<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; headersJson <\/span><span style=\"color: #d4d4d4;\">=<\/span><span style=\"color: #9cdcfe;\">OBJECT_MAPPER<\/span><span style=\"color: #cccccc;\">.<\/span><span style=\"color: #dcdcaa;\">writeValueAsString<\/span><span style=\"color: #cccccc;\">(headerMap);<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; } <\/span><span style=\"color: #c586c0;\">catch<\/span><span style=\"color: #cccccc;\"> (<\/span><span style=\"color: #4ec9b0;\">JsonProcessingException<\/span><span style=\"color: #9cdcfe;\">e<\/span><span style=\"color: #cccccc;\">) {<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <\/span><span style=\"color: #9cdcfe;\">log<\/span><span style=\"color: #cccccc;\">.<\/span><span style=\"color: #dcdcaa;\">error<\/span><span style=\"color: #cccccc;\">(<\/span><span style=\"color: #ce9178;\">\"Error occurred while converting the headerMap : \"<\/span><span style=\"color: #d4d4d4;\">+<\/span><span style=\"color: #9cdcfe;\">headerMap<\/span><span style=\"color: #cccccc;\">.<\/span><span style=\"color: #dcdcaa;\">toString<\/span><span style=\"color: #cccccc;\">() <\/span><span style=\"color: #d4d4d4;\">+<\/span><span style=\"color: #ce9178;\">\" to string\"<\/span><span style=\"color: #cccccc;\">);<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; }<\/span><\/div><br><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; <\/span><span style=\"color: #c586c0;\">return<\/span><span style=\"color: #cccccc;\"> headersJson;<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; }<\/span><\/div><\/div><pre><code><\/code>\/\/&nbsp;Method used to&nbsp;make HTTP Client call<br>public static HTTPResult doPostRequest(String aBaseurl, Map&lt;String, String&gt; aHeaderMapToPost, String aDataToPost) {\n      Map&lt;String, String&gt; aHeaderMapToPost = aHeaderMapToPost == null ? new HashMap() : aHeaderMapToPost;\n      HttpPost httpPost = new HttpPost(aBaseurl);\n      populateHeaderAttributes((HttpPost)httpPost, (Map)aHeaderMapToPost);\n      String contentType = (String)((Map)aHeaderMapToPost).get(\"content_type\");\n      String charset = (String)((Map)aHeaderMapToPost).get(\"charset\");\n      contentType = contentType == null ? \"text\/xml\" : contentType;\n      charset = charset == null ? \"ISO-8859-1\" : charset;\n      HTTPResult result = new HTTPResult();\n      CloseableHttpResponse response = null;\n\n      try {\n         StringEntity entity = new StringEntity(aDataToPost, ContentType.create(contentType, charset));\n         httpPost.setEntity(entity);\n         httpPost.setConfig(getSetRequestConfig(aBaseurl, (Map)aHeaderMapToPost));\n         HttpContext context = HttpClientContext.create();\n         response = getClient(aBaseurl).execute(httpPost, context);\n         processResponse(response, result);\n      } catch (Throwable var13) {\n         handleException(var13, result);\n      } finally {\n         closeResource(response);\n         httpPost.releaseConnection();\n      }\n\n      if (log.isDebugEnabled()) {\n         log.debug(\"HTTPPoolServiceRegistryStats::\" + map + \",\" + HTTPClientFactory.getInstance().registryStats());\n      }\n\n      return result;\n   }<br><\/pre><p><br><\/p>",
		"heading" : "ClientProtocolException",
		"labels" : "Redis,Springboot,HTTP,API,HTTPHeaders",
		"problem_description" : "I was not able to make a HTTP Post request to a given endpoint with headers I received from the client when they register their webhook URL.",
		"project_name" : "RCM-3666 -> Template Status via HTTP",
		"reference_links" : "https:\/\/discuss.elastic.co\/t\/error-elasticsearch-service-unable-to-retrieve-version-information-from-elasticsearch-nodes\/306399;https:\/\/p.ip.fi\/fuIH",
		"solution_text" : "It was because, I mocked the subscription API by sending a dummy request through postman to my server endpoint. I extracted the headers using the below code. The request sent from postman has this header which has the length of the content the API request held. So whenever I tried to send the request to the client registered webhookURL at my endpoint I used to load all the headers blindly which caused this error. If the header has a non-null value of content-length, it would throw this error:\n\"org.apache.http.client.ClientProtocolException: null\\r\\n\", (Complete error linked in the references)"
	},
	{
		"id" : 5,
		"code_block_after_fix" : "<pre><code><\/code>public class WebhookRuleMapper implements RowMapper<webhookrule> {<br>    @Override<br>    public WebhookRule mapRow(ResultSet rs, int rowNum) throws SQLException {<br>        WebhookRule webhookRule = new WebhookRule();<br>        \/\/ Mapping 'rule_code' as a String to preserve leading zeros<br>        webhookRule.setRuleCode(rs.getString(\"rule_code\"));<br>        return webhookRule;<br>    }<br>}<br><\/webhookrule><br><\/pre>",
		"code_block_before_fix" : "<pre><code><\/code>public class WebhookRuleMapper implements RowMapper<webhookrule> {<br>    @Override<br>    public WebhookRule mapRow(ResultSet rs, int rowNum) throws SQLException {<br>        WebhookRule webhookRule = new WebhookRule();<br>        \/\/ Mapping 'rule_code' as an integer, which loses leading zeros<br>        webhookRule.setRuleCode(rs.getInt(\"rule_code\"));<br>        return webhookRule;<br>    }<br>}<br><\/webhookrule><br><\/pre>",
		"heading" : "Error while creating webhook rule through GUI",
		"labels" : "Redis,Springboot,SQL,NamedParameterJdbcTemplate",
		"problem_description" : "An error occurs when creating a webhook rule via the GUI. The root cause of the issue is in the code where, while mapping data from the ResultSet, an integer type is used instead of a string. This causes any string value with leading zeros (e.g., \"090\") to be interpreted as an integer (i.e., 90), which results in data inconsistencies or errors during processing.",
		"project_name" : "RCM Ticket - 1",
		"reference_links" : "https:\/\/discuss.elastic.co\/t\/error-elasticsearch-service-unable-to-retrieve-version-information-from-elasticsearch-nodes\/306399;https:\/\/docs.spring.io\/spring-framework\/docs\/current\/javadoc-api\/org\/springframework\/jdbc\/core\/namedparam\/NamedParameterJdbcTemplate.html;https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/sql\/ResultSet.html",
		"solution_text" : "To resolve this, the mapper should explicitly use a string type to handle values with leading zeros, ensuring they are interpreted as strings. By using NamedParameterJdbcTemplate and updating the RowMapper to retrieve the value as a string, we prevent any unintended integer conversion."
	},
	{
		"id" : 8,
		"code_block_after_fix" : "<pre><code><\/code>@Autowired<br>private RedisTemplate<string, string=\"\"> redisTemplate;<br><br>public void saveData(String key, String value) {<br>    \/\/ Correctly saving and retrieving the value as a String<br>    redisTemplate.opsForValue().set(key, value);<br>}<br><br>public String retrieveData(String key) {<br>    return redisTemplate.opsForValue().get(key);<br>}<br><\/string,><br><\/pre>",
		"code_block_before_fix" : "<pre><code><\/code>@Autowired<br>private RedisTemplate<string, integer=\"\"> redisTemplate;<br><br>public void saveData(String key, String value) {<br>    \/\/ Saving a string value in a RedisTemplate configured for integers<br>    redisTemplate.opsForValue().set(key, Integer.parseInt(value));<br>}<br><br>public Integer retrieveData(String key) {<br>    return redisTemplate.opsForValue().get(key);<br>}<br><\/string,><br><\/pre>",
		"heading" : "ClassCastException Due to Data Type Mismatch in RedisTemplate Configuration",
		"labels" : "Redis,Spring Boot,RedisTemplate,Data Type Mismatch,ClassCastException,Caching,Java",
		"problem_description" : "An error occurs while using Redis in a Spring Boot application due to incorrect data type handling. The issue arises because the application attempts to store and retrieve data from Redis using an incompatible data type. For example, storing numeric data as a String and then trying to retrieve it as an integer, which causes a ClassCastException at runtime.",
		"project_name" : "SpringBoot-Redis Integration",
		"reference_links" : "https:\/\/discuss.elastic.co\/t\/error-elasticsearch-service-unable-to-retrieve-version-information-from-elasticsearch-nodes\/306399;https:\/\/docs.spring.io\/spring-boot\/reference\/data\/nosql.html#data.nosql.redis;https:\/\/docs.spring.io\/spring-data\/redis\/docs\/current\/api\/org\/springframework\/data\/redis\/core\/RedisTemplate.html",
		"solution_text" : "To resolve this, ensure that the correct data type is used consistently when storing and retrieving data in Redis. If using Redis as a caching mechanism, leverage serialization and deserialization where needed, and specify the expected data types in the RedisTemplate configuration."
	},
	{
		"id" : 9,
		"code_block_after_fix" : "<div style=\"color: #cccccc;background-color: #1f1f1f;font-family: Consolas, 'Courier New', monospace;font-weight: normal;font-size: 12.5px;line-height: 17px;white-space: pre;\"><div><span style=\"color: #569cd6;\">package<\/span><span style=\"color: #4ec9b0;\">com<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">opdinna<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">error_vault<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">backend<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">security<\/span><span style=\"color: #cccccc;\">;<\/span><\/div><br><div><span style=\"color: #569cd6;\">import<\/span><span style=\"color: #4ec9b0;\">org<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">springframework<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">context<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">annotation<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">Bean<\/span><span style=\"color: #cccccc;\">;<\/span><\/div><div><span style=\"color: #569cd6;\">import<\/span><span style=\"color: #4ec9b0;\">org<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">springframework<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">context<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">annotation<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">Configuration<\/span><span style=\"color: #cccccc;\">;<\/span><\/div><div><span style=\"color: #569cd6;\">import<\/span><span style=\"color: #4ec9b0;\">org<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">springframework<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">security<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">config<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">annotation<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">web<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">builders<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">HttpSecurity<\/span><span style=\"color: #cccccc;\">;<\/span><\/div><div><span style=\"color: #569cd6;\">import<\/span><span style=\"color: #4ec9b0;\">org<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">springframework<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">security<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">web<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">SecurityFilterChain<\/span><span style=\"color: #cccccc;\">;<\/span><\/div><br><div><span style=\"color: #cccccc;\">@<\/span><span style=\"color: #4ec9b0;\">Configuration<\/span><\/div><div><span style=\"color: #569cd6;\">public<\/span><span style=\"color: #569cd6;\">class<\/span><span style=\"color: #4ec9b0;\">SecurityConfig<\/span><span style=\"color: #cccccc;\"> {<\/span><\/div><br><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; @<\/span><span style=\"color: #4ec9b0;\">Bean<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; <\/span><span style=\"color: #569cd6;\">public<\/span><span style=\"color: #4ec9b0;\">SecurityFilterChain<\/span><span style=\"color: #dcdcaa;\">filterChain<\/span><span style=\"color: #cccccc;\">(<\/span><span style=\"color: #4ec9b0;\">HttpSecurity<\/span><span style=\"color: #9cdcfe;\">http<\/span><span style=\"color: #cccccc;\">) <\/span><span style=\"color: #569cd6;\">throws<\/span><span style=\"color: #4ec9b0;\">Exception<\/span><span style=\"color: #cccccc;\"> {<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <\/span><span style=\"color: #9cdcfe;\">http<\/span><span style=\"color: #cccccc;\">.<\/span><span style=\"color: #dcdcaa;\">csrf<\/span><span style=\"color: #cccccc;\">(<\/span><span style=\"color: #9cdcfe;\">csrf<\/span><span style=\"color: #569cd6;\">-&gt;<\/span><span style=\"color: #9cdcfe;\">csrf<\/span><span style=\"color: #cccccc;\">.<\/span><span style=\"color: #dcdcaa;\">disable<\/span><span style=\"color: #cccccc;\">())<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<\/span><span style=\"color: #dcdcaa;\">authorizeHttpRequests<\/span><span style=\"color: #cccccc;\">(<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <\/span><span style=\"color: #9cdcfe;\">configurer<\/span><span style=\"color: #569cd6;\">-&gt;<\/span><span style=\"color: #9cdcfe;\">configurer<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<\/span><span style=\"color: #dcdcaa;\">anyRequest<\/span><span style=\"color: #cccccc;\">().<\/span><span style=\"color: #dcdcaa;\">permitAll<\/span><span style=\"color: #cccccc;\">());<\/span><\/div><br><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <\/span><span style=\"color: #c586c0;\">return<\/span><span style=\"color: #9cdcfe;\">http<\/span><span style=\"color: #cccccc;\">.<\/span><span style=\"color: #dcdcaa;\">build<\/span><span style=\"color: #cccccc;\">();<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; }<\/span><\/div><div><span style=\"color: #cccccc;\">}<\/span><\/div><br><\/div>",
		"code_block_before_fix" : "<div style=\"color: #cccccc;background-color: #1f1f1f;font-family: Consolas, 'Courier New', monospace;font-weight: normal;font-size: 12.5px;line-height: 17px;white-space: pre;\"><div><span style=\"color: #569cd6;\">package<\/span><span style=\"color: #4ec9b0;\">com<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">opdinna<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">error_vault<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">backend<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">security<\/span><span style=\"color: #cccccc;\">;<\/span><\/div><br><div><span style=\"color: #569cd6;\">import<\/span><span style=\"color: #4ec9b0;\">org<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">springframework<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">context<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">annotation<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">Bean<\/span><span style=\"color: #cccccc;\">;<\/span><\/div><div><span style=\"color: #569cd6;\">import<\/span><span style=\"color: #4ec9b0;\">org<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">springframework<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">context<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">annotation<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">Configuration<\/span><span style=\"color: #cccccc;\">;<\/span><\/div><div><span style=\"color: #569cd6;\">import<\/span><span style=\"color: #4ec9b0;\">org<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">springframework<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">security<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">config<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">annotation<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">web<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">builders<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">HttpSecurity<\/span><span style=\"color: #cccccc;\">;<\/span><\/div><div><span style=\"color: #569cd6;\">import<\/span><span style=\"color: #4ec9b0;\">org<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">springframework<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">security<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">web<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #4ec9b0;\">SecurityFilterChain<\/span><span style=\"color: #cccccc;\">;<\/span><\/div><br><div><span style=\"color: #cccccc;\">@<\/span><span style=\"color: #4ec9b0;\">Configuration<\/span><\/div><div><span style=\"color: #569cd6;\">public<\/span><span style=\"color: #569cd6;\">class<\/span><span style=\"color: #4ec9b0;\">SecurityConfig<\/span><span style=\"color: #cccccc;\"> {<\/span><\/div><br><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; @<\/span><span style=\"color: #4ec9b0;\">Bean<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; <\/span><span style=\"color: #569cd6;\">public<\/span><span style=\"color: #4ec9b0;\">SecurityFilterChain<\/span><span style=\"color: #dcdcaa;\">filterChain<\/span><span style=\"color: #cccccc;\">(<\/span><span style=\"color: #4ec9b0;\">HttpSecurity<\/span><span style=\"color: #9cdcfe;\">http<\/span><span style=\"color: #cccccc;\">) <\/span><span style=\"color: #569cd6;\">throws<\/span><span style=\"color: #4ec9b0;\">Exception<\/span><span style=\"color: #cccccc;\"> {<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <\/span><span style=\"color: #9cdcfe;\">http<\/span><span style=\"color: #cccccc;\">.<\/span><span style=\"color: #dcdcaa;\">csrf<\/span><span style=\"color: #cccccc;\">(<\/span><span style=\"color: #9cdcfe;\">csrf<\/span><span style=\"color: #569cd6;\">-&gt;<\/span><span style=\"color: #9cdcfe;\">csrf<\/span><span style=\"color: #cccccc;\">.<\/span><span style=\"color: #dcdcaa;\">disable<\/span><span style=\"color: #cccccc;\">())<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<\/span><span style=\"color: #dcdcaa;\">authorizeHttpRequests<\/span><span style=\"color: #cccccc;\">(<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <\/span><span style=\"color: #9cdcfe;\">configurer<\/span><span style=\"color: #569cd6;\">-&gt;<\/span><span style=\"color: #9cdcfe;\">configurer<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .<\/span><span style=\"color: #dcdcaa;\">anyRequest<\/span><span style=\"color: #cccccc;\">().<\/span><span style=\"color: #dcdcaa;\">permitAll<\/span><span style=\"color: #cccccc;\">());<\/span><\/div><br><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <\/span><span style=\"color: #c586c0;\">return<\/span><span style=\"color: #9cdcfe;\">http<\/span><span style=\"color: #cccccc;\">.<\/span><span style=\"color: #dcdcaa;\">build<\/span><span style=\"color: #cccccc;\">();<\/span><\/div><div><span style=\"color: #cccccc;\">&nbsp; &nbsp; &nbsp; &nbsp; }<\/span><\/div><div><span style=\"color: #cccccc;\">}<\/span><\/div><br><\/div>",
		"heading" : "sfg",
		"labels" : "Redis,Rajesh",
		"problem_description" : "gshsfh",
		"project_name" : "dhga",
		"reference_links" : "https:\/\/discuss.elastic.co\/t\/error-elasticsearch-service-unable-to-retrieve-version-information-from-elasticsearch-nodes\/306399;https:\/\/www.google.com",
		"solution_text" : "sdgtjsfhms"
	}
]}
